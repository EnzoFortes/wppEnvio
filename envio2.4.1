import requests
import time
import os
import shutil
import base64
from datetime import datetime
import mimetypes

# Caminhos das pastas
PASTA_MONITORADA = r"C:\Users\Cliente\Desktop\wppEnvio\checar"
PASTA_ENVIADOS = r"C:\Users\Cliente\Desktop\wppEnvio\checado"
PASTA_LOGS = r"C:\Users\Cliente\Desktop\wppEnvio\logs"

# Garante que a pasta de logs existe
os.makedirs(PASTA_LOGS, exist_ok=True)

def extrair_dados(caminho_arquivo):
    try:
        with open(caminho_arquivo, "r", encoding="utf-8") as f:
            linhas = f.readlines()
        
        usuario = linhas[0].strip().split("=")[1] if "=" in linhas[0] else ""
        data = linhas[1].strip().split("=")[1] if "=" in linhas[1] else ""
        hora = linhas[2].strip().split("=")[1] if "=" in linhas[2] else ""
        numero = linhas[3].strip()
        anexo = linhas[4].strip() if len(linhas) > 4 else ""
        mensagem = "\n".join(linhas[5:]).strip()
        
        return {
            "usuario": usuario,
            "data": data,
            "hora": hora,
            "telefone": numero,
            "anexo": anexo,
            "mensagem": mensagem
        }, linhas
    except Exception as e:
        print(f"Erro ao extrair dados do arquivo {caminho_arquivo}: {e}")
        return None, None

def converter_para_base64(caminho_anexo):
    try:
        with open(caminho_anexo, "rb") as file:
            return base64.b64encode(file.read()).decode("utf-8")
    except Exception as e:
        print(f"Erro ao converter anexo para base64: {e}")
        return None

def detectar_mime_type(caminho_arquivo):
    mime_type, _ = mimetypes.guess_type(caminho_arquivo)
    return mime_type or "application/octet-stream"

def enviar_mensagem(numero, mensagem, caminho_anexo=None):
    url = "http://localhost:3000/send"
    data = {"number": f"55{numero}", "message": mensagem}
    
    if caminho_anexo and os.path.exists(caminho_anexo):
        arquivo_base64 = converter_para_base64(caminho_anexo)
        if arquivo_base64:
            data["attachment"] = {
                "filename": os.path.basename(caminho_anexo),
                "mimetype": detectar_mime_type(caminho_anexo),
                "data": arquivo_base64
            }
    
    try:
        response = requests.post(url, json=data)
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Erro ao enviar mensagem: {e}")
        return {"success": False, "error": str(e)}

def atualizar_arquivo(caminho_arquivo, linhas_originais, status_envio, anexo_enviado, numero):
    try:
        data_envio = datetime.now().strftime("%d/%m/%Y")
        hora_envio = datetime.now().strftime("%H:%M:%S")
        novas_linhas = linhas_originais + [
            f"\nSTATUS={status_envio}\n",
            f"ANEXO={anexo_enviado}\n",
            f"DATA={data_envio}\n",
            f"HORA={hora_envio}\n",
            f"NUMERO=55{numero}\n"
        ]
        
        with open(caminho_arquivo, "w", encoding="utf-8") as f:
            f.writelines(novas_linhas)
        
        return True
    except Exception as e:
        print(f"Erro ao atualizar arquivo {caminho_arquivo}: {e}")
        return False

def criar_log(arquivo, numero, mensagem, status_envio, anexo_enviado):
    try:
        data_envio = datetime.now().strftime("%d-%m-%Y")
        hora_envio = datetime.now().strftime("%H:%M:%S")
        nome_log = f"{arquivo}_{data_envio}.txt"
        caminho_log = os.path.join(PASTA_LOGS, nome_log)
        
        with open(caminho_log, "w", encoding="utf-8") as log:
            log.write(f"Data: {data_envio}\nHora: {hora_envio}\nNúmero: 55{numero}\nMensagem: {mensagem}\nStatus do envio: {status_envio}\nStatus do anexo: {anexo_enviado}\n")
    except Exception as e:
        print(f"Erro ao criar log para {arquivo}: {e}")

# Configuração do temporizador
tempo_espera = 5  # Inicia com 5 segundos
max_tempo = 30  # Máximo de 30 segundos

while True:
    arquivos = [f for f in os.listdir(PASTA_MONITORADA) if f.endswith('.txt')]
    for arquivo in arquivos:
        caminho_completo = os.path.join(PASTA_MONITORADA, arquivo)
        dados, linhas_originais = extrair_dados(caminho_completo)
        if not dados:
            continue

        numero = dados.get("telefone")
        mensagem = dados.get("mensagem", "Mensagem padrão")
        anexo = dados.get("anexo", "").strip()
        
        caminho_anexo = os.path.join(PASTA_MONITORADA, anexo) if anexo else None
        if caminho_anexo and not os.path.exists(caminho_anexo):
            caminho_anexo = None
        
        resposta = enviar_mensagem(numero, mensagem, caminho_anexo)
        status_envio = "ENVIADO" if resposta.get("success") else "FALHA"
        anexo_enviado = "ENVIADO" if caminho_anexo and resposta.get("success") else "FALHA"

        if atualizar_arquivo(caminho_completo, linhas_originais, status_envio, anexo_enviado, numero):
            criar_log(arquivo, numero, mensagem, status_envio, anexo_enviado)
            shutil.move(caminho_completo, os.path.join(PASTA_ENVIADOS, arquivo))
            if caminho_anexo and resposta.get("success"):
                shutil.move(caminho_anexo, os.path.join(PASTA_ENVIADOS, os.path.basename(caminho_anexo)))
        
        print(f"Aguardando {tempo_espera} segundos para o próximo envio...")
        time.sleep(tempo_espera)
        tempo_espera = 5 if tempo_espera >= max_tempo else tempo_espera + 1  # Reseta após atingir 30s
    
    time.sleep(60)
