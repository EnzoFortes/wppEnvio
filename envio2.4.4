import requests
import time
import os
import shutil
import base64
from datetime import datetime
import mimetypes

# Caminhos das pastas
PASTA_MONITORADA = r"C:\Users\Cliente\Desktop\wppEnvio\checar"
PASTA_ENVIADOS = r"C:\Users\Cliente\Desktop\wppEnvio\checado"
PASTA_LOGS = r"C:\Users\Cliente\Desktop\wppEnvio\logs"
PASTA_ERROR_TXT = r"C:\Users\Cliente\Desktop\wppEnvio\txt_error"
PASTA_ERROR_ANEXO = r"C:\Users\Cliente\Desktop\wppEnvio\anexo_error"

# Garante que as pastas existam
for pasta in [PASTA_LOGS, PASTA_ERROR_TXT, PASTA_ERROR_ANEXO]:
    os.makedirs(pasta, exist_ok=True)

# N√∫mero do administrador
ADMINISTRADOR = "14988350341"
ultima_data_envio_admin = ""

# Tempo inicial de espera
tempo_envio = 5

def verificar_conexao():
    try:
        requests.get("http://www.google.com", timeout=5)
        return True
    except requests.ConnectionError:
        return False

def extrair_dados(caminho_arquivo):
    try:
        with open(caminho_arquivo, "r", encoding="utf-8") as f:
            linhas = f.readlines()
        
        if len(linhas) < 4:
            shutil.move(caminho_arquivo, os.path.join(PASTA_ERROR_TXT, os.path.basename(caminho_arquivo)))
            return None
        
        dados = {
            "USUARIO": linhas[0].split("=")[1].strip(),
            "DATA": linhas[1].split("=")[1].strip(),
            "HORA": linhas[2].split("=")[1].strip(),
            "TELEFONE": linhas[3].strip(),
            "ANEXO": linhas[4].strip() if len(linhas) > 4 else "",
            "MENSAGEM": "\n".join(linhas[5:]).strip() if len(linhas) > 5 else ""
        }
        return dados
    except Exception as e:
        shutil.move(caminho_arquivo, os.path.join(PASTA_ERROR_TXT, os.path.basename(caminho_arquivo)))
        return None

def converter_para_base64(caminho_anexo):
    try:
        with open(caminho_anexo, "rb") as file:
            return base64.b64encode(file.read()).decode("utf-8")
    except:
        return None

def detectar_mime_type(caminho_arquivo):
    mime_type, _ = mimetypes.guess_type(caminho_arquivo)
    return mime_type or "application/octet-stream"

def enviar_mensagem(numero, mensagem, caminho_anexo=None):
    while not verificar_conexao():
        time.sleep(5)
    
    global tempo_envio
    url = "http://localhost:3000/send"
    data = {"number": f"55{numero}", "message": mensagem}
    
    if caminho_anexo and os.path.exists(caminho_anexo):
        arquivo_base64 = converter_para_base64(caminho_anexo)
        if arquivo_base64:
            data["attachment"] = {
                "filename": os.path.basename(caminho_anexo),
                "mimetype": detectar_mime_type(caminho_anexo),
                "data": arquivo_base64
            }
    
    try:
        time.sleep(tempo_envio)
        response = requests.post(url, json=data)
        resposta = response.json()
        
        if resposta.get("success"):
            tempo_envio = 5 if tempo_envio > 30 else tempo_envio + 1
        return resposta
    except requests.exceptions.RequestException:
        return {"success": False, "error": "Erro ao enviar mensagem."}

def verificar_envio_admin():
    global ultima_data_envio_admin
    agora = datetime.now()
    data_atual = agora.strftime("%Y-%m-%d")
    hora_atual = agora.strftime("%H:%M")
    
    if hora_atual == "12:30" and ultima_data_envio_admin != data_atual:
        enviar_mensagem(ADMINISTRADOR, "‚úÖ O sistema est√° online e funcionando normalmente.")
        ultima_data_envio_admin = data_atual

while True:
    verificar_envio_admin()
    arquivos = [f for f in os.listdir(PASTA_MONITORADA) if f.endswith('.txt')]
    
    if not arquivos:
        time.sleep(10)  # Reduz o consumo de CPU
        continue
    
    for arquivo in arquivos:
        caminho_completo = os.path.join(PASTA_MONITORADA, arquivo)
        dados = extrair_dados(caminho_completo)
        if not dados:
            continue
        
        numero = dados.get("TELEFONE")
        mensagem = dados.get("MENSAGEM", "Mensagem padr√£o")
        anexo = dados.get("ANEXO", "").strip()
        caminho_anexo = os.path.join(PASTA_MONITORADA, anexo) if anexo else None
        
        if caminho_anexo and not os.path.exists(caminho_anexo):
            enviar_mensagem(ADMINISTRADOR, f"üö® O anexo {anexo} n√£o foi encontrado! Mensagem movida para verifica√ß√£o.")
            shutil.move(caminho_completo, os.path.join(PASTA_ERROR_ANEXO, arquivo))
            continue
        
        resposta = enviar_mensagem(numero, mensagem, caminho_anexo)
        
        if resposta.get("success"):
            shutil.move(caminho_completo, os.path.join(PASTA_ENVIADOS, arquivo))
            if caminho_anexo:
                shutil.move(caminho_anexo, os.path.join(PASTA_ENVIADOS, os.path.basename(caminho_anexo)))
